@page "/"
@using CheapAvaloniaBlazor.Services
@inject ShotcutService ShotcutSvc
@inject IDesktopInteropService Desktop
@inject ISnackbar Snackbar

<PageTitle>Shotcut Randomizer</PageTitle>

<MudPaper Class="pa-4 mb-4">
    <MudStack Spacing="3">
        <MudText Typo="Typo.h4">Shotcut Project Randomizer</MudText>

        @if (_currentProject == null)
        {
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@LoadProjectAsync" StartIcon="@Icons.Material.Filled.FolderOpen">
                Load Shotcut Project
            </MudButton>
        }
        else
        {
            <MudAlert Severity="Severity.Success">
                Project loaded: <strong>@_projectPath</strong>
            </MudAlert>

            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="@LoadProjectAsync" StartIcon="@Icons.Material.Filled.Refresh">
                Load Different Project
            </MudButton>
        }
    </MudStack>
</MudPaper>

@if (_currentProject != null)
{
    <MudPaper Class="pa-4 mb-4">
        <MudText Typo="Typo.h5" Class="mb-3">Available Playlists</MudText>
        <MudList T="string" Dense="true">
            @for (int i = _currentProject.Playlist.Count - 1; i > 0; i--)
            {
                var playlist = _currentProject.Playlist[i];
                var index = i;
                <MudListItem T="string">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                        <MudText><strong>[@index]</strong> @playlist.Name (@playlist.Entry.Count clips)</MudText>
                        <MudSpacer />
                        <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary"
                                   OnClick="@(() => ShufflePlaylistAsync(index))">
                            Shuffle
                        </MudButton>
                    </MudStack>
                </MudListItem>
            }
        </MudList>
    </MudPaper>

    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h5" Class="mb-3">Generate Random Compilation</MudText>

        <MudStack Spacing="3">
            <MudNumericField @bind-Value="_durationWeight" Label="Duration Weight"
                           HelperText="0 = minimal bias, 0.5 = default, 4 = recommended, 10 = no long videos"
                           Min="0" Max="20" Step="0.5" />

            <MudNumericField @bind-Value="_numberOfVideosWeight" Label="Number of Videos Weight"
                           HelperText="0 = minimal bias, 0.5 = default, 0.8 = recommended"
                           Min="0" Max="5" Step="0.1" />

            <MudTextField @bind-Value="_playlistSelection" Label="Playlist IDs (space-separated)"
                        HelperText="Example: 1 2 3" />

            @if (_selectedPlaylists.Count > 0)
            {
                <MudText Typo="Typo.subtitle1" Class="mt-2">Target Duration for Each Playlist:</MudText>
                @foreach (var playlistIndex in _selectedPlaylists)
                {
                    if (playlistIndex > 0 && playlistIndex < _currentProject.Playlist.Count)
                    {
                        var playlist = _currentProject.Playlist[playlistIndex];
                        var totalSeconds = playlist.Entry.Sum(x => x.Duration);
                        var totalTime = TimeSpan.FromSeconds(totalSeconds);

                        <MudNumericField T="int" Value="@GetTargetHours(playlistIndex)"
                                       ValueChanged="@(hours => SetTargetHours(playlistIndex, hours))"
                                       Label="@($"{playlist.Name} - Target Hours (0 = use all {totalTime:hh\\:mm\\:ss})")"
                                       Min="0" Max="100" />
                    }
                }
            }

            <MudButton Variant="Variant.Filled" Color="Color.Success"
                     OnClick="@GenerateRandomPlaylistAsync" Disabled="@(string.IsNullOrWhiteSpace(_playlistSelection))">
                Generate Random Playlist
            </MudButton>
        </MudStack>
    </MudPaper>
}

@code {
    private Mlt? _currentProject;
    private string _projectPath = string.Empty;
    private double _durationWeight = 4.0;
    private double _numberOfVideosWeight = 0.8;
    private string _playlistSelection = string.Empty;
    private List<int> _selectedPlaylists = [];
    private Dictionary<int, int> _targetHours = new();

    protected override void OnParametersSet()
    {
        UpdateSelectedPlaylists();
    }

    private void UpdateSelectedPlaylists()
    {
        if (string.IsNullOrWhiteSpace(_playlistSelection))
        {
            _selectedPlaylists.Clear();
            return;
        }

        _selectedPlaylists = _playlistSelection
            .Split(' ', StringSplitOptions.RemoveEmptyEntries)
            .Select(s => int.TryParse(s, out int val) ? val : -1)
            .Where(i => i > 0)
            .ToList();
    }

    private int GetTargetHours(int playlistIndex)
        => _targetHours.GetValueOrDefault(playlistIndex, 0);

    private void SetTargetHours(int playlistIndex, int hours)
    {
        _targetHours[playlistIndex] = hours;
    }

    private async Task LoadProjectAsync()
    {
        try
        {
            var path = await Desktop.OpenFileDialogAsync(new()
            {
                Title = "Select Shotcut Project",
                Filters = [new() { Name = "MLT Project", Extensions = ["mlt"] }]
            });

            if (string.IsNullOrWhiteSpace(path))
                return;

            _projectPath = path;
            _currentProject = await ShotcutSvc.LoadProjectAsync(path);

            if (_currentProject == null)
            {
                Snackbar.Add("Failed to load project", Severity.Error);
                return;
            }

            Snackbar.Add("Project loaded successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task ShufflePlaylistAsync(int playlistIndex)
    {
        try
        {
            if (_currentProject == null)
                return;

            ShotcutSvc.ShufflePlaylist(_currentProject, playlistIndex);

            var newPath = await ShotcutSvc.SaveProjectAsync(_currentProject, _projectPath);

            Snackbar.Add($"Shuffled and saved to: {Path.GetFileName(newPath)}", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error shuffling: {ex.Message}", Severity.Error);
        }
    }

    private async Task GenerateRandomPlaylistAsync()
    {
        try
        {
            UpdateSelectedPlaylists();

            if (_currentProject == null || _selectedPlaylists.Count == 0)
            {
                Snackbar.Add("Please select at least one playlist", Severity.Warning);
                return;
            }

            var sourcePlaylists = _selectedPlaylists
                .Select(idx => (idx, _targetHours.GetValueOrDefault(idx, 0) * 3600))
                .ToList();

            var newPlaylist = ShotcutSvc.GenerateRandomPlaylist(
                _currentProject,
                sourcePlaylists,
                _durationWeight,
                _numberOfVideosWeight
            );

            var newPath = await ShotcutSvc.SaveProjectAsync(_currentProject, _projectPath);

            Snackbar.Add($"Generated playlist with {newPlaylist.Entry.Count} clips. Saved to: {Path.GetFileName(newPath)}", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error generating: {ex.Message}", Severity.Error);
        }
    }
}
