@page "/"
@using CheapAvaloniaBlazor.Services
@inject ShotcutService ShotcutSvc
@inject IDesktopInteropService Desktop
@inject ISnackbar Snackbar

<PageTitle>Shotcut Randomizer</PageTitle>

<MudPaper Class="pa-4 mb-4">
    <MudStack Spacing="3">
        <MudText Typo="Typo.h4">Shotcut Project Randomizer</MudText>

        @if (_currentProject == null)
        {
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@LoadProjectAsync" StartIcon="@Icons.Material.Filled.FolderOpen">
                Load Shotcut Project
            </MudButton>
        }
        else
        {
            <MudAlert Severity="Severity.Success">
                Project loaded: <strong>@_projectPath</strong>
            </MudAlert>

            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="@LoadProjectAsync" StartIcon="@Icons.Material.Filled.Refresh">
                Load Different Project
            </MudButton>
        }
    </MudStack>
</MudPaper>

@if (_currentProject != null)
{
    <MudPaper Class="pa-4 mb-4">
        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2" Class="mb-3">
            <MudText Typo="Typo.h5">Available Playlists</MudText>
            <MudSpacer />
            <MudButton Size="Size.Small" Variant="Variant.Text" Color="Color.Primary" OnClick="@SelectAllPlaylists">
                Select All
            </MudButton>
            <MudButton Size="Size.Small" Variant="Variant.Text" Color="Color.Secondary" OnClick="@ClearAllPlaylists">
                Clear All
            </MudButton>
        </MudStack>
        @if (_selectedPlaylists.Count > 0)
        {
            <MudAlert Severity="Severity.Info" Dense="true" Class="mb-2">
                @_selectedPlaylists.Count playlist@(_selectedPlaylists.Count == 1 ? "" : "s") selected
            </MudAlert>
        }
        else
        {
            <MudText Typo="Typo.body2" Class="mb-2">Select playlists to include in random compilation:</MudText>
        }
        <MudList T="string" Dense="true">
            @for (int i = _currentProject.Playlist.Count - 1; i > 0; i--)
            {
                var playlist = _currentProject.Playlist[i];
                var index = i;
                <MudListItem T="string">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                        <MudCheckBox T="bool" Value="@_selectedPlaylists.Contains(index)"
                                     ValueChanged="@(selected => TogglePlaylistSelection(index, selected))"
                                     Color="Color.Primary" />
                        <MudText><strong>[@index]</strong> @playlist.Name (@playlist.Entry.Count clips)</MudText>
                        <MudSpacer />
                        <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary"
                                   OnClick="@(() => ShufflePlaylistAsync(index))">
                            Shuffle
                        </MudButton>
                    </MudStack>
                </MudListItem>
            }
        </MudList>
    </MudPaper>

    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h5" Class="mb-3">Generate Random Compilation</MudText>

        <MudStack Spacing="3">
            <MudStack Spacing="1">
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                    <MudText Typo="Typo.body2">
                        <strong>Duration Weight:</strong> @_durationWeight.ToString("0.00")
                    </MudText>
                    <MudTooltip Text="Controls preference for shorter vs longer videos. Higher values strongly favor shorter clips. Use 0 for no bias, 4 for balanced mix, or 10+ to heavily prioritize short videos.">
                        <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Small" Color="Color.Primary" />
                    </MudTooltip>
                </MudStack>
                <MudSlider @bind-Value="_durationWeight"
                           Min="0" Max="20" Step="0.05"
                           Color="Color.Primary"
                           Variant="Variant.Filled">
                    @_durationWeight.ToString("0.00")
                </MudSlider>
                <MudText Typo="Typo.caption" Class="mud-text-secondary">
                    Affects video length selection: 0 = no preference • 0.5 = minimal bias • 4 = balanced (recommended) • 10+ = only short clips
                </MudText>
            </MudStack>

            <MudStack Spacing="1">
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                    <MudText Typo="Typo.body2">
                        <strong>Number of Videos Weight:</strong> @_numberOfVideosWeight.ToString("0.00")
                    </MudText>
                    <MudTooltip Text="Controls preference for including more clips in the final playlist. Higher values will try to maximize the number of videos included. Use 0 for duration-focused selection, or 0.8 for variety.">
                        <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Small" Color="Color.Primary" />
                    </MudTooltip>
                </MudStack>
                <MudSlider @bind-Value="_numberOfVideosWeight"
                           Min="0" Max="5" Step="0.01"
                           Color="Color.Primary"
                           Variant="Variant.Filled">
                    @_numberOfVideosWeight.ToString("0.00")
                </MudSlider>
                <MudText Typo="Typo.caption" Class="mud-text-secondary">
                    Affects clip count: 0 = duration-focused • 0.5 = balanced • 0.8 = more variety (recommended) • 1+ = maximum clips
                </MudText>
            </MudStack>

            @if (_selectedPlaylists.Count > 0)
            {
                <MudText Typo="Typo.subtitle1" Class="mt-2">Target Duration for Each Playlist:</MudText>
                @foreach (var playlistIndex in _selectedPlaylists)
                {
                    if (playlistIndex > 0 && playlistIndex < _currentProject.Playlist.Count)
                    {
                        var playlist = _currentProject.Playlist[playlistIndex];
                        var totalSeconds = playlist.Entry.Sum(x => x.Duration);
                        var totalTime = TimeSpan.FromSeconds(totalSeconds);
                        var currentSeconds = GetTargetSeconds(playlistIndex);
                        var displayDuration = currentSeconds == 0
                            ? $"All clips ({totalTime:hh\\:mm\\:ss})"
                            : TimeSpan.FromSeconds(currentSeconds).ToString(@"hh\:mm\:ss");

                        <MudStack Spacing="1">
                            <MudText Typo="Typo.body2">
                                <strong>@playlist.Name:</strong> @displayDuration
                            </MudText>
                            <MudSlider T="int"
                                       Value="@currentSeconds"
                                       ValueChanged="@(seconds => SetTargetSeconds(playlistIndex, seconds))"
                                       Min="0"
                                       Max="@totalSeconds"
                                       Step="60"
                                       Color="Color.Primary"
                                       Variant="Variant.Filled">
                                @if (currentSeconds == 0)
                                {
                                    <text>All (@totalTime.ToString(@"hh\:mm\:ss"))</text>
                                }
                                else
                                {
                                    @TimeSpan.FromSeconds(currentSeconds).ToString(@"hh\:mm\:ss")
                                }
                            </MudSlider>
                        </MudStack>
                    }
                }
            }

            <MudButton Variant="Variant.Filled" Color="Color.Success"
                     OnClick="@GenerateRandomPlaylistAsync" Disabled="@(_selectedPlaylists.Count == 0)">
                Generate Random Playlist
            </MudButton>
        </MudStack>
    </MudPaper>
}

@code {
    private Mlt? _currentProject;
    private string _projectPath = string.Empty;
    private double _durationWeight = 4.0;
    private double _numberOfVideosWeight = 0.8;
    private HashSet<int> _selectedPlaylists = [];
    private Dictionary<int, int> _targetSeconds = new();

    private void TogglePlaylistSelection(int playlistIndex, bool selected)
    {
        if (selected)
        {
            _selectedPlaylists.Add(playlistIndex);
        }
        else
        {
            _selectedPlaylists.Remove(playlistIndex);
            _targetSeconds.Remove(playlistIndex);
        }
    }

    private void SelectAllPlaylists()
    {
        if (_currentProject == null) return;

        _selectedPlaylists.Clear();
        for (int i = 1; i < _currentProject.Playlist.Count; i++)
        {
            _selectedPlaylists.Add(i);
        }
    }

    private void ClearAllPlaylists()
    {
        _selectedPlaylists.Clear();
        _targetSeconds.Clear();
    }

    private int GetTargetSeconds(int playlistIndex)
        => _targetSeconds.GetValueOrDefault(playlistIndex, 0);

    private void SetTargetSeconds(int playlistIndex, int seconds)
    {
        _targetSeconds[playlistIndex] = seconds;
    }

    private async Task LoadProjectAsync()
    {
        try
        {
            var path = await Desktop.OpenFileDialogAsync(new()
            {
                Title = "Select Shotcut Project",
                Filters = [new() { Name = "MLT Project", Extensions = ["mlt"] }]
            });

            if (string.IsNullOrWhiteSpace(path))
                return;

            _projectPath = path;
            _currentProject = await ShotcutSvc.LoadProjectAsync(path);

            if (_currentProject == null)
            {
                Snackbar.Add("Failed to load project", Severity.Error);
                return;
            }

            Snackbar.Add("Project loaded successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task ShufflePlaylistAsync(int playlistIndex)
    {
        try
        {
            if (_currentProject == null)
                return;

            ShotcutSvc.ShufflePlaylist(_currentProject, playlistIndex);

            var newPath = await ShotcutSvc.SaveProjectAsync(_currentProject, _projectPath);

            Snackbar.Add($"Shuffled and saved to: {Path.GetFileName(newPath)}", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error shuffling: {ex.Message}", Severity.Error);
        }
    }

    private async Task GenerateRandomPlaylistAsync()
    {
        try
        {
            if (_currentProject == null || _selectedPlaylists.Count == 0)
            {
                Snackbar.Add("Please select at least one playlist", Severity.Warning);
                return;
            }

            var sourcePlaylists = _selectedPlaylists
                .Select(idx => (idx, _targetSeconds.GetValueOrDefault(idx, 0)))
                .ToList();

            var newPlaylist = ShotcutSvc.GenerateRandomPlaylist(
                _currentProject,
                sourcePlaylists,
                _durationWeight,
                _numberOfVideosWeight
            );

            var newPath = await ShotcutSvc.SaveProjectAsync(_currentProject, _projectPath);

            Snackbar.Add($"Generated playlist with {newPlaylist.Entry.Count} clips. Saved to: {Path.GetFileName(newPath)}", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error generating: {ex.Message}", Severity.Error);
        }
    }
}
